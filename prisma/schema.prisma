generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AccountType {
  STARTER
  PRO
}

model User {
  id        String      @id @default(cuid())
  stripeId  String      @unique
  email     String      @unique
  password  String
  name      String?
  confirmed Boolean     @default(false)
  role      Role        @default(USER)
  riderType AccountType @default(STARTER)
  bikes     Bike[]
  comments  Comment[]
  likes     Like[]
}

model Bike {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  brand       String           @db.VarChar(255)
  model       String
  description String
  categories  BikeToCategory[]
  user        User?            @relation(fields: [userId], references: [id])
  userId      String?
  comments    Comment[]
  likes       Like[]
}

model Category {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String           @db.VarChar(255)
  bikes     BikeToCategory[]
}

model BikeToCategory {
  bike       Bike     @relation(fields: [bikeId], references: [id], onDelete: Cascade)
  bikeId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime @default(now())

  @@id([bikeId, categoryId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  bike      Bike?    @relation(fields: [bikeId], references: [id], onDelete: Cascade)
  bikeId    String?
}

model Like {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  bike   Bike?   @relation(fields: [bikeId], references: [id])
  bikeId String?
}
